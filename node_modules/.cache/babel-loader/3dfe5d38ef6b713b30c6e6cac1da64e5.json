{"ast":null,"code":"var _jsxFileName = \"/Users/DarshGondalia/Desktop/blogspotremastered/src/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport { Route, Navigate } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AuthContext } from './context/AuthProvider.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PrivateRoute(_ref) {\n  _s();\n\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  const {\n    auth\n  } = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      if (!auth) {\n        // not logged in so redirect to login page with the return url\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: props.location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 24\n        }, this);\n      } // authorized so return component\n\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 20\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PrivateRoute, \"uMxshdEHcVn5hGKM7T+8HCaYP1w=\");\n\n_c = PrivateRoute;\nexport { PrivateRoute };\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Route","Navigate","useContext","AuthContext","PrivateRoute","component","Component","rest","auth","props","pathname","state","from","location"],"sources":["/Users/DarshGondalia/Desktop/blogspotremastered/src/PrivateRoute.js"],"sourcesContent":["import { Route, Navigate } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AuthContext } from './context/AuthProvider.js';\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n    const {auth} = useContext(AuthContext);\n    return (\n        <Route {...rest} render={props => {\n            if (!auth) {\n                // not logged in so redirect to login page with the return url\n                return <Navigate to={{ pathname: '/login', state: { from: props.location } }} />\n            }\n\n            // authorized so return component\n            return <Component {...props} />\n        }} />\n    );\n}\n\nexport { PrivateRoute };"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,2BAA5B;;;AAEA,SAASC,YAAT,OAAyD;EAAA;;EAAA,IAAnC;IAAEC,SAAS,EAAEC,SAAb;IAAwB,GAAGC;EAA3B,CAAmC;EACrD,MAAM;IAACC;EAAD,IAASN,UAAU,CAACC,WAAD,CAAzB;EACA,oBACI,QAAC,KAAD,OAAWI,IAAX;IAAiB,MAAM,EAAEE,KAAK,IAAI;MAC9B,IAAI,CAACD,IAAL,EAAW;QACP;QACA,oBAAO,QAAC,QAAD;UAAU,EAAE,EAAE;YAAEE,QAAQ,EAAE,QAAZ;YAAsBC,KAAK,EAAE;cAAEC,IAAI,EAAEH,KAAK,CAACI;YAAd;UAA7B;QAAd;UAAA;UAAA;UAAA;QAAA,QAAP;MACH,CAJ6B,CAM9B;;;MACA,oBAAO,QAAC,SAAD,OAAeJ;MAAf;QAAA;QAAA;QAAA;MAAA,QAAP;IACH;EARD;IAAA;IAAA;IAAA;EAAA,QADJ;AAWH;;GAbQL,Y;;KAAAA,Y;AAeT,SAASA,YAAT"},"metadata":{},"sourceType":"module"}