[{"/Users/DarshGondalia/Desktop/blogspotremastered/src/index.js":"1","/Users/DarshGondalia/Desktop/blogspotremastered/src/App.js":"2","/Users/DarshGondalia/Desktop/blogspotremastered/src/Random.js":"3","/Users/DarshGondalia/Desktop/blogspotremastered/src/Login.js":"4","/Users/DarshGondalia/Desktop/blogspotremastered/src/Home.js":"5","/Users/DarshGondalia/Desktop/blogspotremastered/src/Profile.js":"6","/Users/DarshGondalia/Desktop/blogspotremastered/src/context/AuthProvider.js":"7","/Users/DarshGondalia/Desktop/blogspotremastered/src/Register.js":"8","/Users/DarshGondalia/Desktop/blogspotremastered/src/PrivateRoute.js":"9","/Users/DarshGondalia/Desktop/BlogSpot1/src/index.js":"10","/Users/DarshGondalia/Desktop/BlogSpot1/src/App.js":"11","/Users/DarshGondalia/Desktop/BlogSpot1/src/Profile.js":"12","/Users/DarshGondalia/Desktop/BlogSpot1/src/PrivateRoute.js":"13","/Users/DarshGondalia/Desktop/BlogSpot1/src/MyBlogs.js":"14","/Users/DarshGondalia/Desktop/BlogSpot1/src/Login.js":"15","/Users/DarshGondalia/Desktop/BlogSpot1/src/Register.js":"16","/Users/DarshGondalia/Desktop/BlogSpot1/src/Random.js":"17","/Users/DarshGondalia/Desktop/BlogSpot1/src/Home.js":"18","/Users/DarshGondalia/Desktop/BlogSpot1/src/context/AuthProvider.js":"19"},{"size":470,"mtime":1656691830511,"results":"20","hashOfConfig":"21"},{"size":1728,"mtime":1656699070678,"results":"22","hashOfConfig":"21"},{"size":108,"mtime":1656691758313,"results":"23","hashOfConfig":"21"},{"size":2949,"mtime":1656699381530,"results":"24","hashOfConfig":"21"},{"size":102,"mtime":1656690389065,"results":"25","hashOfConfig":"21"},{"size":111,"mtime":1656690451236,"results":"26","hashOfConfig":"21"},{"size":89,"mtime":1656690316698,"results":"27","hashOfConfig":"21"},{"size":12904,"mtime":1656699019585,"results":"28","hashOfConfig":"21"},{"size":848,"mtime":1656697160892,"results":"29","hashOfConfig":"21"},{"size":470,"mtime":1656691830511,"results":"30","hashOfConfig":"31"},{"size":1728,"mtime":1656699070678,"results":"32","hashOfConfig":"31"},{"size":111,"mtime":1656690451236,"results":"33","hashOfConfig":"31"},{"size":848,"mtime":1656697160892,"results":"34","hashOfConfig":"31"},{"size":2235,"mtime":1659638508986,"results":"35","hashOfConfig":"31"},{"size":2949,"mtime":1659636899804,"results":"36","hashOfConfig":"31"},{"size":12904,"mtime":1656699019585,"results":"37","hashOfConfig":"31"},{"size":108,"mtime":1656691758313,"results":"38","hashOfConfig":"31"},{"size":102,"mtime":1656690389065,"results":"39","hashOfConfig":"31"},{"size":89,"mtime":1656690316698,"results":"40","hashOfConfig":"31"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xqg3hr",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1oucn44",{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/DarshGondalia/Desktop/blogspotremastered/src/index.js",[],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/App.js",[],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/Random.js",[],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/Login.js",[],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/Home.js",[],[],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/Profile.js",[],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/context/AuthProvider.js",[],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/Register.js",["105","106"],[],"/Users/DarshGondalia/Desktop/blogspotremastered/src/PrivateRoute.js",["107"],[],"import { Route, Navigate } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AuthContext } from './context/AuthProvider.js';\n\n// function PrivateRoute({ children} : { children: JSX.Element }) {\n//     const {auth} = useContext(AuthContext);\n//     return (\n//         <Route {...rest} render={props => {\n//             if (!auth) {\n//                 // not logged in so redirect to login page with the return url\n//                 return <Navigate to={{ pathname: '/login', state: { from: props.location } }} />\n//             }\n\n//             // authorized so return component\n//             return <Component {...props} />\n//         }} />\n//     );\n// }\nconst PrivateRoute = ({children}) => {\n    const {auth} = useContext(AuthContext);\n\n    return !auth ? <Navigate to=\"/login\" /> : children;\n}\n\n\nexport { PrivateRoute };",[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/index.js",[],[],[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/App.js",[],[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/Profile.js",[],[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/PrivateRoute.js",["108"],[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/MyBlogs.js",["109"],[],"import React, { useContext, useState } from 'react'\nimport { AuthContext } from './context/AuthProvider.js';\nimport axios from 'axios';\n\n\nfunction MyBlogs() {\n    const {auth, setAuth} = useContext(AuthContext);\n    const [postTitle, setPostTitle] = useState('');\n    const [postContent, setPostContent] = useState('');\n    \n    \n    const date = (today, format) => {\n        const map = {\n            mm: ('0' + (today.getMonth() + 1)).slice(-2),\n            dd: ('0' + today.getDate()).slice(-2),\n            yyyy: today.getFullYear()\n        }\n        return format.replace(/yyyy|mm|dd/gi, matched => map[matched]);\n    };\n\n\n    const handlePostSubmit = async (e) => {\n        e.preventDefault();\n        let today = new Date();\n\n        today = date(today, 'yyyy-mm-dd');\n        try{\n            const data = JSON.stringify({username: auth.user, date: today, post_title: postTitle, post_details: postContent});\n            const response = await axios.post('http://localhost:3001/MyBlogs/post', data, {\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            });\n            console.log(JSON.stringify(response.data));\n        }catch(err){\n            console.log(err);\n        }\n    };\n\n  \n    return (\n        <div>\n        <h1>Welcome to your blogs, {auth.user}!</h1>\n            <div>\n                <form onSubmit={handlePostSubmit}>\n                    <h6>Create your blog!</h6>\n                    <div>Hello </div>\n                    <label>Post Title</label>\n                    <input \n                    type=\"text\" \n                    className='PostContent' \n                    onChange={(e) => setPostTitle(e.target.value)}\n                    value={postTitle}\n                    required>\n                    </input>\n                    <label>Post Content</label>\n                    <input \n                    type=\"text\" \n                    className='PostContent' \n                    onChange={(e) => setPostContent(e.target.value)}\n                    value={postContent}\n                    required></input>\n                    <button>Post</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default MyBlogs","/Users/DarshGondalia/Desktop/BlogSpot1/src/Login.js",[],[],[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/Register.js",["110","111"],[],"import React, { useRef, useState, useEffect } from \"react\";\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport axios from 'axios';\nimport \"./Login.css\";\n\nconst USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\nconst PHONE_REGEX = /^(\\+\\d{1,2}\\s?)?1?\\-?\\.?\\s?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\nconst EMAIL_REGEX = /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/;\n  \n\nfunction Register() {\n    const userRef = useRef();\n    const errRef = useRef();\n\n    const [user, setUser] = useState('');\n    const [validName, setValidName] = useState(false);\n    const [userFocus, setUserFocus] = useState(false);\n\n    const [fullname, setFullname] = useState('');\n    const [validFullname, setValidFullname] = useState(false);\n    const [fullnameFocus, setFullnameFocus] = useState(false);\n\n    const [pwd, setPwd] = useState('');\n    const [validPwd, setValidPwd] = useState(false);\n    const [pwdFocus, setPwdFocus] = useState(false);\n\n    const [matchPwd, setMatchPwd] = useState('');\n    const [validMatch, setValidMatch] = useState(false);\n    const [matchFocus, setMatchFocus] = useState(false);\n\n    const [phone, setPhone] = useState('');\n    const [validPhone, setValidPhone] = useState(false);\n    const [phoneFocus, setPhoneFocus] = useState(false);\n\n    const [email, setEmail] = useState('');\n    const [validEmail, setValidEmail] = useState(false);\n    const [emailFocus, setEmailFocus] = useState(false);\n\n    const [errMsg, setErrMsg] = useState('');\n    const [success, setSuccess] = useState(false);\n    \n    useEffect(() => {\n        userRef.current.focus();\n    }, [])\n\n    useEffect(() => {\n        setValidName(USER_REGEX.test(user));\n    }, [user])\n    \n    useEffect(() => {\n      setValidFullname(fullname);\n    }, [fullname])\n\n    useEffect(() => {\n        setValidPwd(PWD_REGEX.test(pwd));\n        setValidMatch(pwd === matchPwd);\n    }, [pwd, matchPwd])\n\n    useEffect(() => {\n      setValidPhone(PHONE_REGEX.test(phone));\n    }, [phone])\n\n    useEffect(() => {\n      setValidEmail(EMAIL_REGEX.test(email));\n    }, [email])\n\n    useEffect(() => {\n        setErrMsg('');\n    }, [user, pwd, matchPwd, phone])\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        // if button enabled with JS hack\n        const v1 = USER_REGEX.test(user);\n        const v2 = PWD_REGEX.test(pwd);\n        const v3 = PHONE_REGEX.test(phone);\n        const v4 = EMAIL_REGEX.test(email);\n\n        if (!v1 || !v2 || !v3 || !v4) {\n            setErrMsg(\"Invalid Entry\");\n            return;\n        }\n        try {\n          const data = JSON.stringify({ username: user, password: pwd, first_name: fullname, last_name: phone, email: email });\n          const response = await axios.post('http://localhost:3001/register', data, {\n            headers: {\n              'Content-Type': 'application/json',\n            }\n          });\n          console.log(response);\n            setSuccess(true);\n            setUser('');\n            setPwd('');\n            setMatchPwd('');\n            setEmail('');\n            setPhone('');\n        } catch (err) {\n            errRef.current.focus();\n        }\n    }\n    \n    return (\n        <>\n            {success ? (\n                <section>\n                    <h1>Success!</h1>\n                    <p>\n                    <Link className=\"NavLink\" to=\"/login\">Log In</Link>\n                    </p>\n                </section>\n            ) : (\n                <section>\n                    <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n                    <h1>Register</h1>\n                    <form onSubmit={handleSubmit}>\n                        <label htmlFor=\"username\">\n                            Username:\n                            <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\n                            <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            id=\"username\"\n                            ref={userRef}\n                            autoComplete=\"off\"\n                            onChange={(e) => setUser(e.target.value)}\n                            value={user}\n                            required\n                            aria-invalid={validName ? \"false\" : \"true\"}\n                            aria-describedby=\"uidnote\"\n                            onFocus={() => setUserFocus(true)}\n                            onBlur={() => setUserFocus(false)}\n                        />\n                        <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n                            <FontAwesomeIcon icon={faInfoCircle} />\n                            4 to 24 characters.<br />\n                            Must begin with a letter.<br />\n                            Letters, numbers, underscores, hyphens allowed.\n                        </p>\n\n\n                        <label htmlFor=\"fullname\">\n                            Full Name:\n                            <FontAwesomeIcon icon={faCheck} className={validFullname ? \"valid\" : \"hide\"} />\n                            <FontAwesomeIcon icon={faTimes} className={validFullname || !fullname ? \"hide\" : \"invalid\"} />\n                        </label>\n                        <input\n                            type=\"text\"\n                            id=\"fullname\"\n                            ref={userRef}\n                            autoComplete=\"off\"\n                            onChange={(e) => setFullname(e.target.value)}\n                            value={fullname}\n                            required\n                            aria-invalid={validFullname ? \"false\" : \"true\"}\n                            aria-describedby=\"fullnamenote\"\n                            onFocus={() => setFullnameFocus(true)}\n                            onBlur={() => setFullnameFocus(false)}\n                        />\n                        <p id=\"fullnamenote\" className={fullnameFocus && fullname && !validFullname ? \"instructions\" : \"offscreen\"}>\n                            <FontAwesomeIcon icon={faInfoCircle} />\n                            4 to 24 characters.<br />\n                            Must begin with a letter.<br />\n                        </p>\n                        \n                        \n                        <label htmlFor=\"phone\">\n                            Phone:\n                            <FontAwesomeIcon icon={faCheck} className={validPhone ? \"valid\" : \"hide\"} />\n                            <FontAwesomeIcon icon={faTimes} className={validPhone || !phone ? \"hide\" : \"invalid\"} />\n                        </label>\n                        <input\n                            type=\"tel\"\n                            id=\"phone\"\n                            ref={userRef}\n                            autoComplete=\"off\"\n                            onChange={(e) => setPhone(e.target.value)}\n                            value={phone}\n                            required\n                            aria-invalid={validPhone ? \"false\" : \"true\"}\n                            aria-describedby=\"phonenote\"\n                            onFocus={() => setPhoneFocus(true)}\n                            onBlur={() => setPhoneFocus(false)}\n                        />\n                        <p id=\"phonenote\" className={phoneFocus && phone && !validPhone ? \"instructions\" : \"offscreen\"}>\n                            <FontAwesomeIcon icon={faInfoCircle} />\n                            Enter Phone number in proper format<br />\n                            +Country Code (###) ### #### <br />\n                        </p>\n\n                        <label htmlFor=\"email\">\n                            Email:\n                            <FontAwesomeIcon icon={faCheck} className={validEmail ? \"valid\" : \"hide\"} />\n                            <FontAwesomeIcon icon={faTimes} className={validEmail || !email ? \"hide\" : \"invalid\"} />\n                        </label>\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            ref={userRef}\n                            autoComplete=\"off\"\n                            onChange={(e) => setEmail(e.target.value)}\n                            value={email}\n                            required\n                            aria-invalid={validEmail ? \"false\" : \"true\"}\n                            aria-describedby=\"emailnote\"\n                            onFocus={() => setEmailFocus(true)}\n                            onBlur={() => setEmailFocus(false)}\n                        />\n                        <p id=\"emailnote\" className={emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\"}>\n                            <FontAwesomeIcon icon={faInfoCircle} />\n                            Enter a valid email<br />\n                        </p>\n\n\n                        <label htmlFor=\"password\">\n                            Password:\n                            <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\n                            <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\n                        </label>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            onChange={(e) => setPwd(e.target.value)}\n                            value={pwd}\n                            required\n                            aria-invalid={validPwd ? \"false\" : \"true\"}\n                            aria-describedby=\"pwdnote\"\n                            onFocus={() => setPwdFocus(true)}\n                            onBlur={() => setPwdFocus(false)}\n                        />\n                        <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\n                            <FontAwesomeIcon icon={faInfoCircle} />\n                            8 to 24 characters.<br />\n                            Must include uppercase and lowercase letters, a number and a special character.<br />\n                            Allowed special characters: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\n                        </p>\n\n\n                        <label htmlFor=\"confirm_pwd\">\n                            Confirm Password:\n                            <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\n                            <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\n                        </label>\n                        <input\n                            type=\"password\"\n                            id=\"confirm_pwd\"\n                            onChange={(e) => setMatchPwd(e.target.value)}\n                            value={matchPwd}\n                            required\n                            aria-invalid={validMatch ? \"false\" : \"true\"}\n                            aria-describedby=\"confirmnote\"\n                            onFocus={() => setMatchFocus(true)}\n                            onBlur={() => setMatchFocus(false)}\n                        />\n                        <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\n                            <FontAwesomeIcon icon={faInfoCircle} />\n                            Must match the first password input field.\n                        </p>\n\n\n                        <button className='loginFormButton' disabled={!validName || !validPwd || !validMatch || !validPhone ? true : false}>Sign Up</button>\n                    </form>\n                    <p>\n                        Already registered?<br />\n                        <span className=\"line\">\n                            {/*put router link here*/}\n                            <Link className=\"NavLink\" to=\"/login\">Log In</Link>\n                        </span>\n                    </p>\n                </section>\n            )}\n        </>\n  \n    )\n}\n\nexport default Register","/Users/DarshGondalia/Desktop/BlogSpot1/src/Random.js",[],[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/Home.js",[],[],"/Users/DarshGondalia/Desktop/BlogSpot1/src/context/AuthProvider.js",[],[],{"ruleId":"112","severity":1,"message":"113","line":10,"column":40,"nodeType":"114","messageId":"115","endLine":10,"endColumn":41,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":11,"column":21,"nodeType":"114","messageId":"119","endLine":11,"endColumn":471},{"ruleId":"120","severity":1,"message":"121","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":15},{"ruleId":"120","severity":1,"message":"121","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":15},{"ruleId":"120","severity":1,"message":"124","line":7,"column":18,"nodeType":"122","messageId":"123","endLine":7,"endColumn":25},{"ruleId":"112","severity":1,"message":"113","line":10,"column":40,"nodeType":"114","messageId":"115","endLine":10,"endColumn":41,"suggestions":"125"},{"ruleId":"117","severity":1,"message":"118","line":11,"column":21,"nodeType":"114","messageId":"119","endLine":11,"endColumn":471},"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["126","127"],"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","unexpected","no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'setAuth' is assigned a value but never used.",["128","129"],{"messageId":"130","fix":"131","desc":"132"},{"messageId":"133","fix":"134","desc":"135"},{"messageId":"130","fix":"136","desc":"132"},{"messageId":"133","fix":"137","desc":"135"},"removeEscape",{"range":"138","text":"139"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"140","text":"141"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"142","text":"139"},{"range":"143","text":"141"},[463,464],"",[463,463],"\\",[463,464],[463,463]]