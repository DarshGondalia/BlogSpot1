[{"C:\\individual projects\\blogspot\\src\\index.js":"1","C:\\individual projects\\blogspot\\src\\App.js":"2","C:\\individual projects\\blogspot\\src\\MyBlogs.js":"3","C:\\individual projects\\blogspot\\src\\Random.js":"4","C:\\individual projects\\blogspot\\src\\Register.js":"5","C:\\individual projects\\blogspot\\src\\Home.js":"6","C:\\individual projects\\blogspot\\src\\Join.js":"7","C:\\individual projects\\blogspot\\src\\Profile.js":"8","C:\\individual projects\\blogspot\\src\\PrivateRoute.js":"9","C:\\individual projects\\blogspot\\src\\Login.js":"10","C:\\individual projects\\blogspot\\src\\context\\AuthProvider.js":"11","C:\\individual projects\\blogspot\\src\\styles\\GlobalStyles.style.js":"12","C:\\individual projects\\blogspot\\src\\components\\Modal.js":"13","C:\\individual projects\\blogspot\\src\\components\\Navbar.js":"14","C:\\individual projects\\blogspot\\src\\styles\\Input.style.js":"15","C:\\individual projects\\blogspot\\src\\styles\\Button.style.js":"16","C:\\individual projects\\blogspot\\src\\styles\\variables.js":"17","C:\\individual projects\\blogspot\\src\\components\\SearchBar.js":"18"},{"size":485,"mtime":1659825441937,"results":"19","hashOfConfig":"20"},{"size":2116,"mtime":1660427181849,"results":"21","hashOfConfig":"20"},{"size":2830,"mtime":1660662169275,"results":"22","hashOfConfig":"20"},{"size":116,"mtime":1659555067184,"results":"23","hashOfConfig":"20"},{"size":11713,"mtime":1660662614930,"results":"24","hashOfConfig":"20"},{"size":871,"mtime":1660662169266,"results":"25","hashOfConfig":"20"},{"size":13175,"mtime":1660426111621,"results":"26","hashOfConfig":"20"},{"size":119,"mtime":1659555067184,"results":"27","hashOfConfig":"20"},{"size":873,"mtime":1659555067183,"results":"28","hashOfConfig":"20"},{"size":3354,"mtime":1660853502880,"results":"29","hashOfConfig":"20"},{"size":93,"mtime":1659555067186,"results":"30","hashOfConfig":"20"},{"size":10519,"mtime":1660862522614,"results":"31","hashOfConfig":"20"},{"size":964,"mtime":1660249972709,"results":"32","hashOfConfig":"20"},{"size":3628,"mtime":1660862218720,"results":"33","hashOfConfig":"20"},{"size":1090,"mtime":1660426597791,"results":"34","hashOfConfig":"20"},{"size":1599,"mtime":1660428135058,"results":"35","hashOfConfig":"20"},{"size":418,"mtime":1660426888456,"results":"36","hashOfConfig":"20"},{"size":683,"mtime":1659909964129,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"qpcy2y",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"C:\\individual projects\\blogspot\\src\\index.js",[],[],[],"C:\\individual projects\\blogspot\\src\\App.js",["99","100","101","102","103"],[],"import './App.css';\r\nimport React, { useState } from 'react';\r\nimport {BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport Home from './Home.js';\r\nimport Random from './Random.js';\r\nimport Profile from './Profile.js';\r\nimport MyBlogs from './MyBlogs.js';\r\nimport Register from './Register.js';\r\nimport { PrivateRoute } from './PrivateRoute.js';\r\nimport Login from './Login.js';\r\nimport { AuthContext } from './context/AuthProvider.js';\r\n\r\nimport Navbar from './components/Navbar.js'; \r\nimport { GlobalStyles } from './styles/GlobalStyles.style.js';\r\nimport Modal from './components/Modal.js';\r\nimport Join from './Join.js';\r\n\r\nfunction App() {\r\n  const [auth, setAuth] = useState('');\r\n  const [isOpen, SetIsOpen] = useState(false);\r\n\r\n\r\n  return (\r\n    <AuthContext.Provider value={{auth, setAuth}}>\r\n      <GlobalStyles />\r\n      <Router>\r\n        {/* <div className='Title'>\r\n          <div className='TitleName'>\r\n            <strong>BlogSpot</strong>\r\n            \r\n          </div>\r\n        </div> */}\r\n\r\n        {/* <nav className=\"NavBar\" id=\"NavBar\">\r\n          <Link className=\"NavLink\" to=\"/\"> Home </Link>\r\n          <Link className='NavLink' to=\"/profile\">Profile</Link>\r\n          <Link className='NavLink' to=\"/random\">Random</Link>\r\n          <Link className='NavLink' to=\"/myblogs\">MyBlogs</Link>\r\n          <Link className='NavLinkLogin' to=\"/login\"><button className=\"LoginButton\">Login</button></Link> \r\n        </nav> */}\r\n        \r\n          {!auth? <Navbar />: <Navbar userloggedIn={true}/>}\r\n          <Routes>\r\n            <Route path=\"/\" element={<Home />} />\r\n            <Route path=\"/random\" element={<PrivateRoute><Random /></PrivateRoute>} />\r\n            <Route path=\"/profile\" element={<PrivateRoute><Profile /></PrivateRoute>} />\r\n            <Route path=\"/myblogs\" element={<PrivateRoute><MyBlogs /></PrivateRoute>} />\r\n            <Route path=\"/login\" element={<Login />} />\r\n            <Route path=\"/register\" element={<Register />} />\r\n          </Routes>\r\n        \r\n\r\n        </Router>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\individual projects\\blogspot\\src\\MyBlogs.js",["104"],[],"import React, { useContext, useState } from 'react'\r\nimport { AuthContext } from './context/AuthProvider.js';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction MyBlogs() {\r\n    const {auth, setAuth} = useContext(AuthContext);\r\n    const [postTitle, setPostTitle] = useState('');\r\n    const [postDescription, setPostDesc] = useState('');\r\n    const [postKeywords, setPostKeywords] = useState('');\r\n    const [postContent, setPostContent] = useState('');\r\n\r\n    const handlePostSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // let today = new Date();\r\n\r\n        // today = date(today, 'yyyy-mm-dd');\r\n        try{\r\n            const data = JSON.stringify({username: auth.user, posttitle: postTitle, postdescription: postDescription, postkeywords: postKeywords, postcontent: postContent});\r\n            const response = await axios.post('http://localhost:3001/MyBlogs/post', data, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n            console.log(JSON.stringify(response.data));\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n  \r\n    return (\r\n        <div>\r\n        <h1>Welcome to your blogs, {auth.user}!</h1>\r\n            <div>\r\n                <form onSubmit={handlePostSubmit}>\r\n                    <h6>Create your blog!</h6>\r\n                    <div>Hello </div>\r\n                    <label>Post Title</label>\r\n                    <input \r\n                    type=\"text\" \r\n                    className='PostContent' \r\n                    onChange={(e) => setPostTitle(e.target.value)}\r\n                    value={postTitle}\r\n                    required>\r\n                    </input>\r\n\r\n                    <label>Post Description</label>\r\n                    <input \r\n                    type=\"text\" \r\n                    className='PostContent' \r\n                    onChange={(e) => setPostDesc(e.target.value)}\r\n                    value={postDescription}\r\n                    required>\r\n                    </input>\r\n\r\n                    <label>Post Keywords</label>\r\n                    <input \r\n                    type=\"text\" \r\n                    className='PostContent' \r\n                    onChange={(e) => setPostKeywords(e.target.value)}\r\n                    value={postKeywords}\r\n                    required>\r\n                    </input>\r\n\r\n                    <label>Post Content</label>\r\n                    <input \r\n                    type=\"text\" \r\n                    className='PostContent' \r\n                    onChange={(e) => setPostContent(e.target.value)}\r\n                    value={postContent}\r\n                    required></input>\r\n                    <button>Post</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyBlogs","C:\\individual projects\\blogspot\\src\\Random.js",[],[],"C:\\individual projects\\blogspot\\src\\Register.js",["105","106","107","108","109","110"],[],"import { faCheck, faInfoCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { Button } from './styles/Button.style.js'\r\nimport { Input } from './styles/Input.style.js'\r\nimport CheckCircle from '@mui/icons-material/CheckCircle.js';\r\n\r\nconst CheckCircleIcon = CheckCircle.default;\r\n\r\nexport default function Register() {\r\n  const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\n  const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n  const PHONE_REGEX = /^(\\+\\d{1,2}\\s?)?1?\\-?\\.?\\s?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\r\n  const EMAIL_REGEX = /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/;\r\n  \r\n  const userRef = useRef();\r\n  const errRef = useRef();\r\n\r\n  const [user, setUser] = useState('');\r\n  const [validName, setValidName] = useState(false);\r\n  const [userFocus, setUserFocus] = useState(false);\r\n\r\n  const [fullname, setFullname] = useState('');\r\n  const [validFullname, setValidFullname] = useState(false);\r\n  const [fullnameFocus, setFullnameFocus] = useState(false);\r\n\r\n  const [pwd, setPwd] = useState('');\r\n  const [validPwd, setValidPwd] = useState(false);\r\n  const [pwdFocus, setPwdFocus] = useState(false);\r\n\r\n  const [matchPwd, setMatchPwd] = useState('');\r\n  const [validMatch, setValidMatch] = useState(false);\r\n  const [matchFocus, setMatchFocus] = useState(false);\r\n\r\n  const [phone, setPhone] = useState('');\r\n  const [validPhone, setValidPhone] = useState(false);\r\n  const [phoneFocus, setPhoneFocus] = useState(false);\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [validEmail, setValidEmail] = useState(false);\r\n  const [emailFocus, setEmailFocus] = useState(false);\r\n\r\n  const [errMsg, setErrMsg] = useState('');\r\n  const [Success, setSuccess] = useState(false);\r\n  \r\n    useEffect(() => {\r\n        userRef.current.focus();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setValidName(USER_REGEX.test(user));\r\n    }, [user])\r\n    \r\n    useEffect(() => {\r\n      setValidFullname(fullname);\r\n      console.log(fullname)\r\n    }, [fullname])\r\n\r\n    useEffect(() => {\r\n        setValidPwd(PWD_REGEX.test(pwd));\r\n        setValidMatch(pwd === matchPwd);\r\n    }, [pwd, matchPwd])\r\n\r\n    useEffect(() => {\r\n      setValidPhone(PHONE_REGEX.test(phone));\r\n    }, [phone])\r\n\r\n    useEffect(() => {\r\n      setValidEmail(EMAIL_REGEX.test(email));\r\n    }, [email])\r\n\r\n    useEffect(() => {\r\n        setErrMsg('');\r\n    }, [user, pwd, matchPwd, phone])\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    const v1 = USER_REGEX.test(user);\r\n    const v2 = PWD_REGEX.test(pwd);\r\n    const v3 = PHONE_REGEX.test(phone);\r\n    const v4 = EMAIL_REGEX.test(email);\r\n\r\n    if (!v1 || !v2 || !v3 || !v4) {\r\n        setErrMsg(\"Invalid Entry\");\r\n        return;\r\n    }\r\n    try {\r\n      const data = JSON.stringify({ username: user, password: pwd, first_name: fullname, last_name: phone, email: email });\r\n      const response = await axios.post('http://localhost:3001/register', data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n      console.log(response);\r\n      setSuccess(true);\r\n    } catch (err) {\r\n        errRef.current.focus();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n        { Success ? (\r\n            <div className='text-center'>\r\n                <h1>Success!</h1>\r\n                <div className='m-3'>Your account has been created!</div>\r\n                <CheckCircleIcon sx={{fontSize: \"100px\", color: \"#34b233\"}}/>\r\n                <br />\r\n                <Button sty=\"link\" style={{fontSize: \"22px\"}} onClick={() => document.getElementById('login_button').click()}>Log In</Button>\r\n            </div>\r\n            ) : (\r\n                <div className=\"text-center\">\r\n                <h1>Join BlogSpot</h1>\r\n                <br />\r\n                <hr />\r\n                <form onSubmit={handleSubmit}>\r\n                    <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n                    <Input\r\n                        ref={userRef}\r\n                        className=\"mb-2\"\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        sty=\"modal\"\r\n                        onChange={(e) => setUser(e.target.value)}\r\n                        placeholder=\"Choose a Username\" \r\n                        autoComplete='off'\r\n                        onFocus={() => setUserFocus(true)}\r\n                        onBlur={() => setUserFocus(false)}\r\n                        required\r\n                        />\r\n                    <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\r\n                    <p className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\r\n                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                        4 to 24 characters.<br />\r\n                        Must begin with a letter.<br />\r\n                        Letters, numbers, underscores, hyphens allowed.\r\n                    </p>\r\n                    <br />\r\n                    <Input\r\n                        className=\"mb-2\"\r\n                        type=\"text\"\r\n                        name=\"fullname\"\r\n                        sty=\"modal\"\r\n                        onChange={(e) => setFullname(e.target.value)}\r\n                        placeholder=\"Enter your full name\" \r\n                        autoComplete='off'\r\n                        onFocus={() => setFullnameFocus(true)}\r\n                        onBlur={() => setFullnameFocus(false)}\r\n                        required\r\n                        />\r\n                    <FontAwesomeIcon icon={faCheck} className={validFullname ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validFullname || !fullname ? \"hide\" : \"invalid\"} />\r\n                    <p className={fullnameFocus && fullname && !validFullname ? \"instructions\" : \"offscreen\"}>\r\n                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                        4 to 24 characters.<br />\r\n                        Must begin with a letter.<br />\r\n                    </p>\r\n                    <br />\r\n                    <Input\r\n                        className=\"mb-2\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        sty=\"modal\"\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        placeholder=\"Enter your email\"\r\n                        autoComplete='off'\r\n                        onFocus={() => setEmailFocus(true)}\r\n                        onBlur={() => setEmailFocus(false)}\r\n                        required\r\n                        />\r\n                    <FontAwesomeIcon icon={faCheck} className={validEmail ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validEmail || !email ? \"hide\" : \"invalid\"} />\r\n                    <p className={emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\"}>\r\n                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                        Enter a valid email<br />\r\n                    </p>\r\n                    <br />\r\n                    <Input\r\n                        className=\"mb-2\"\r\n                        type=\"password\" \r\n                        name=\"password\"\r\n                        sty=\"modal\"\r\n                        onChange={(e) => setPwd(e.target.value)}\r\n                        placeholder=\"Choose a Password\"\r\n                        onFocus={() => setPwdFocus(true)}\r\n                        onBlur={() => setPwdFocus(false)}\r\n                        required\r\n                    />\r\n                    <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\r\n                    <p className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\r\n                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                        8 to 24 characters.<br />\r\n                        Must include uppercase and lowercase letters, a number and a special character.<br />\r\n                        Allowed special characters: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\r\n                    </p>\r\n                    <br />\r\n                    <Input\r\n                        className=\"mb-2\"\r\n                        type=\"password\"\r\n                        name=\"password2\"\r\n                        sty=\"modal\"\r\n                        onChange={(e) => setMatchPwd(e.target.value)}\r\n                        placeholder=\"Re-type your password\"\r\n                        onFocus={() => setMatchFocus(true)}\r\n                        onBlur={() => setMatchFocus(false)}\r\n                        required\r\n                    />\r\n                    <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\r\n                    <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\r\n                    <p className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\r\n                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                        Must match the first password input field.\r\n                    </p>\r\n                    <br />\r\n                    <Input\r\n                        className=\"mb-3\"\r\n                        type=\"tel\"\r\n                        name='tel'\r\n                        sty=\"modal\"\r\n                        onChange={(e) => setPhone(e.target.value)}\r\n                        placeholder=\"Enter your phone number\" \r\n                        autoComplete=\"off\"\r\n                        onFocus={() => setPhoneFocus(true)}\r\n                        onBlur={() => setPhoneFocus(false)}\r\n                        required\r\n                    />\r\n                    <p className={phoneFocus && phone && !validPhone ? \"instructions\" : \"offscreen\"}>\r\n                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                        Enter Phone number in proper format<br />\r\n                        +Country Code (###) ### #### <br />\r\n                    </p>\r\n                    <br />\r\n                    <div className='ms-2 mb-3 text-start'>\r\n                        <input type=\"checkbox\" name=\"remember\"/>\r\n                        <label className='ms-1'>\r\n                            I agree the terms of use\r\n                        </label>\r\n                    </div>\r\n                    <Button color=\"white\" sty=\"modal\" disabled={!validName || !validPwd || !validMatch || !validPhone ? true : false}>Join</Button> \r\n                    <br /><br />\r\n                </form>\r\n                <hr />\r\n                <Button sty=\"link\" onClick={() => document.getElementById('login_button').click()}>Already have an account?</Button>\r\n            </div>\r\n        )}\r\n    </>\r\n)}\r\n","C:\\individual projects\\blogspot\\src\\Home.js",["111"],[],"import React, {useState} from 'react';\r\n// import ListPost from './ListPost.js';\r\nimport axios from 'axios';\r\n\r\nfunction Home() {\r\n\r\n  const [list, setList] = useState([]);\r\n\r\n\r\n  const blogs = async () => {\r\n    try{\r\n        let response = await axios.get('http://localhost:3001/home');\r\n        let data = response.data.rows;\r\n        setList(data);\r\n        return list;\r\n        console.log(data[0]);\r\n        for(let i = 0; i < data.length; i++){\r\n          list.push(data[i]);\r\n        }\r\n        console.log(list.length);\r\n        return JSON.parse(list);\r\n    }catch(err){\r\n        console.log(err);\r\n    }\r\n  };\r\n  blogs();\r\n  const blogList = list.map(currPost =>  \r\n      <h2>\r\n        {currPost.username}, {currPost.posttitle}, {currPost.convertedtime}, {currPost.postcontent}\r\n      </h2>\r\n    );\r\n\r\n  return <div>{blogList}</div>;\r\n}\r\n\r\nexport default Home","C:\\individual projects\\blogspot\\src\\Join.js",["112","113"],[],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport axios from 'axios';\r\nimport \"./Login.css\";\r\n\r\nconst USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\nconst PHONE_REGEX = /^(\\+\\d{1,2}\\s?)?1?\\-?\\.?\\s?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\r\nconst EMAIL_REGEX = /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/;\r\n  \r\n\r\nfunction Join() {\r\n    const userRef = useRef();\r\n    const errRef = useRef();\r\n\r\n    const [user, setUser] = useState('');\r\n    const [validName, setValidName] = useState(false);\r\n    const [userFocus, setUserFocus] = useState(false);\r\n\r\n    const [fullname, setFullname] = useState('');\r\n    const [validFullname, setValidFullname] = useState(false);\r\n    const [fullnameFocus, setFullnameFocus] = useState(false);\r\n\r\n    const [pwd, setPwd] = useState('');\r\n    const [validPwd, setValidPwd] = useState(false);\r\n    const [pwdFocus, setPwdFocus] = useState(false);\r\n\r\n    const [matchPwd, setMatchPwd] = useState('');\r\n    const [validMatch, setValidMatch] = useState(false);\r\n    const [matchFocus, setMatchFocus] = useState(false);\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setValidPhone] = useState(false);\r\n    const [phoneFocus, setPhoneFocus] = useState(false);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [validEmail, setValidEmail] = useState(false);\r\n    const [emailFocus, setEmailFocus] = useState(false);\r\n\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        userRef.current.focus();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setValidName(USER_REGEX.test(user));\r\n    }, [user])\r\n    \r\n    useEffect(() => {\r\n      setValidFullname(fullname);\r\n    }, [fullname])\r\n\r\n    useEffect(() => {\r\n        setValidPwd(PWD_REGEX.test(pwd));\r\n        setValidMatch(pwd === matchPwd);\r\n    }, [pwd, matchPwd])\r\n\r\n    useEffect(() => {\r\n      setValidPhone(PHONE_REGEX.test(phone));\r\n    }, [phone])\r\n\r\n    useEffect(() => {\r\n      setValidEmail(EMAIL_REGEX.test(email));\r\n    }, [email])\r\n\r\n    useEffect(() => {\r\n        setErrMsg('');\r\n    }, [user, pwd, matchPwd, phone])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // if button enabled with JS hack\r\n        const v1 = USER_REGEX.test(user);\r\n        const v2 = PWD_REGEX.test(pwd);\r\n        const v3 = PHONE_REGEX.test(phone);\r\n        const v4 = EMAIL_REGEX.test(email);\r\n\r\n        if (!v1 || !v2 || !v3 || !v4) {\r\n            setErrMsg(\"Invalid Entry\");\r\n            return;\r\n        }\r\n        try {\r\n          const data = JSON.stringify({ username: user, password: pwd, first_name: fullname, last_name: phone, email: email });\r\n          const response = await axios.post('http://localhost:3001/register', data, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            }\r\n          });\r\n          console.log(response);\r\n            setSuccess(true);\r\n            setUser('');\r\n            setPwd('');\r\n            setMatchPwd('');\r\n            setEmail('');\r\n            setPhone('');\r\n        } catch (err) {\r\n            errRef.current.focus();\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {success ? (\r\n                <section>\r\n                    <h1>Success!</h1>\r\n                    <p>\r\n                    <Link className=\"NavLink\" to=\"/login\">Log In</Link>\r\n                    </p>\r\n                </section>\r\n            ) : (\r\n                <section>\r\n                    <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n                    <h1>Register</h1>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <label htmlFor=\"username\">\r\n                            Username:\r\n                            <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            ref={userRef}\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => setUser(e.target.value)}\r\n                            value={user}\r\n                            required\r\n                            aria-invalid={validName ? \"false\" : \"true\"}\r\n                            aria-describedby=\"uidnote\"\r\n                            onFocus={() => setUserFocus(true)}\r\n                            onBlur={() => setUserFocus(false)}\r\n                        />\r\n                        <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            4 to 24 characters.<br />\r\n                            Must begin with a letter.<br />\r\n                            Letters, numbers, underscores, hyphens allowed.\r\n                        </p>\r\n\r\n\r\n                        <label htmlFor=\"fullname\">\r\n                            Full Name:\r\n                            <FontAwesomeIcon icon={faCheck} className={validFullname ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validFullname || !fullname ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"fullname\"\r\n                            ref={userRef}\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => setFullname(e.target.value)}\r\n                            value={fullname}\r\n                            required\r\n                            aria-invalid={validFullname ? \"false\" : \"true\"}\r\n                            aria-describedby=\"fullnamenote\"\r\n                            onFocus={() => setFullnameFocus(true)}\r\n                            onBlur={() => setFullnameFocus(false)}\r\n                        />\r\n                        <p id=\"fullnamenote\" className={fullnameFocus && fullname && !validFullname ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            4 to 24 characters.<br />\r\n                            Must begin with a letter.<br />\r\n                        </p>\r\n                        \r\n                        \r\n                        <label htmlFor=\"phone\">\r\n                            Phone:\r\n                            <FontAwesomeIcon icon={faCheck} className={validPhone ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validPhone || !phone ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"tel\"\r\n                            id=\"phone\"\r\n                            ref={userRef}\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            value={phone}\r\n                            required\r\n                            aria-invalid={validPhone ? \"false\" : \"true\"}\r\n                            aria-describedby=\"phonenote\"\r\n                            onFocus={() => setPhoneFocus(true)}\r\n                            onBlur={() => setPhoneFocus(false)}\r\n                        />\r\n                        <p id=\"phonenote\" className={phoneFocus && phone && !validPhone ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            Enter Phone number in proper format<br />\r\n                            +Country Code (###) ### #### <br />\r\n                        </p>\r\n\r\n                        <label htmlFor=\"email\">\r\n                            Email:\r\n                            <FontAwesomeIcon icon={faCheck} className={validEmail ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validEmail || !email ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            ref={userRef}\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            value={email}\r\n                            required\r\n                            aria-invalid={validEmail ? \"false\" : \"true\"}\r\n                            aria-describedby=\"emailnote\"\r\n                            onFocus={() => setEmailFocus(true)}\r\n                            onBlur={() => setEmailFocus(false)}\r\n                        />\r\n                        <p id=\"emailnote\" className={emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            Enter a valid email<br />\r\n                        </p>\r\n\r\n\r\n                        <label htmlFor=\"password\">\r\n                            Password:\r\n                            <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            onChange={(e) => setPwd(e.target.value)}\r\n                            value={pwd}\r\n                            required\r\n                            aria-invalid={validPwd ? \"false\" : \"true\"}\r\n                            aria-describedby=\"pwdnote\"\r\n                            onFocus={() => setPwdFocus(true)}\r\n                            onBlur={() => setPwdFocus(false)}\r\n                        />\r\n                        <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            8 to 24 characters.<br />\r\n                            Must include uppercase and lowercase letters, a number and a special character.<br />\r\n                            Allowed special characters: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\r\n                        </p>\r\n\r\n\r\n                        <label htmlFor=\"confirm_pwd\">\r\n                            Confirm Password:\r\n                            <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"confirm_pwd\"\r\n                            onChange={(e) => setMatchPwd(e.target.value)}\r\n                            value={matchPwd}\r\n                            required\r\n                            aria-invalid={validMatch ? \"false\" : \"true\"}\r\n                            aria-describedby=\"confirmnote\"\r\n                            onFocus={() => setMatchFocus(true)}\r\n                            onBlur={() => setMatchFocus(false)}\r\n                        />\r\n                        <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            Must match the first password input field.\r\n                        </p>\r\n\r\n\r\n                        <button className='loginFormButton' disabled={!validName || !validPwd || !validMatch || !validPhone ? true : false}>Sign Up</button>\r\n                    </form>\r\n                    <p>\r\n                        Already registered?<br />\r\n                        <span className=\"line\">\r\n                            {/*put router link here*/}\r\n                            <Link className=\"NavLink\" to=\"/login\">Log In</Link>\r\n                        </span>\r\n                    </p>\r\n                </section>\r\n            )}\r\n        </>\r\n  \r\n    )\r\n}\r\n\r\nexport default Join","C:\\individual projects\\blogspot\\src\\Profile.js",[],[],"C:\\individual projects\\blogspot\\src\\PrivateRoute.js",["114"],[],"import { Route, Navigate } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from './context/AuthProvider.js';\r\n\r\n// function PrivateRoute({ children} : { children: JSX.Element }) {\r\n//     const {auth} = useContext(AuthContext);\r\n//     return (\r\n//         <Route {...rest} render={props => {\r\n//             if (!auth) {\r\n//                 // not logged in so redirect to login page with the return url\r\n//                 return <Navigate to={{ pathname: '/login', state: { from: props.location } }} />\r\n//             }\r\n\r\n//             // authorized so return component\r\n//             return <Component {...props} />\r\n//         }} />\r\n//     );\r\n// }\r\nconst PrivateRoute = ({children}) => {\r\n    const {auth} = useContext(AuthContext);\r\n\r\n    return !auth ? <Navigate to=\"/login\" /> : children;\r\n}\r\n\r\n\r\nexport { PrivateRoute };","C:\\individual projects\\blogspot\\src\\Login.js",["115","116"],[],"C:\\individual projects\\blogspot\\src\\context\\AuthProvider.js",[],[],"C:\\individual projects\\blogspot\\src\\styles\\GlobalStyles.style.js",[],[],"C:\\individual projects\\blogspot\\src\\components\\Modal.js",[],[],"C:\\individual projects\\blogspot\\src\\components\\Navbar.js",[],[],"C:\\individual projects\\blogspot\\src\\styles\\Input.style.js",[],[],"C:\\individual projects\\blogspot\\src\\styles\\Button.style.js",[],[],"C:\\individual projects\\blogspot\\src\\styles\\variables.js",[],[],"C:\\individual projects\\blogspot\\src\\components\\SearchBar.js",[],[],{"ruleId":"117","severity":1,"message":"118","line":3,"column":49,"nodeType":"119","messageId":"120","endLine":3,"endColumn":53},{"ruleId":"117","severity":1,"message":"121","line":15,"column":8,"nodeType":"119","messageId":"120","endLine":15,"endColumn":13},{"ruleId":"117","severity":1,"message":"122","line":16,"column":8,"nodeType":"119","messageId":"120","endLine":16,"endColumn":12},{"ruleId":"117","severity":1,"message":"123","line":20,"column":10,"nodeType":"119","messageId":"120","endLine":20,"endColumn":16},{"ruleId":"117","severity":1,"message":"124","line":20,"column":18,"nodeType":"119","messageId":"120","endLine":20,"endColumn":27},{"ruleId":"117","severity":1,"message":"125","line":7,"column":18,"nodeType":"119","messageId":"120","endLine":7,"endColumn":25},{"ruleId":"126","severity":1,"message":"127","line":14,"column":42,"nodeType":"128","messageId":"129","endLine":14,"endColumn":43,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":15,"column":23,"nodeType":"128","messageId":"133","endLine":15,"endColumn":473},{"ruleId":"134","severity":1,"message":"135","line":53,"column":8,"nodeType":"136","endLine":53,"endColumn":14,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":63,"column":8,"nodeType":"136","endLine":63,"endColumn":23,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":67,"column":8,"nodeType":"136","endLine":67,"endColumn":15,"suggestions":"141"},{"ruleId":"134","severity":1,"message":"142","line":71,"column":8,"nodeType":"136","endLine":71,"endColumn":15,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":16,"column":9,"nodeType":"146","messageId":"147","endLine":21,"endColumn":33},{"ruleId":"126","severity":1,"message":"127","line":10,"column":40,"nodeType":"128","messageId":"129","endLine":10,"endColumn":41,"suggestions":"148"},{"ruleId":"131","severity":1,"message":"132","line":11,"column":21,"nodeType":"128","messageId":"133","endLine":11,"endColumn":471},{"ruleId":"117","severity":1,"message":"149","line":1,"column":10,"nodeType":"119","messageId":"120","endLine":1,"endColumn":15},{"ruleId":"117","severity":1,"message":"118","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":14},{"ruleId":"117","severity":1,"message":"150","line":22,"column":37,"nodeType":"119","messageId":"120","endLine":22,"endColumn":45},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Join' is defined but never used.","'isOpen' is assigned a value but never used.","'SetIsOpen' is assigned a value but never used.","'setAuth' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["151","152"],"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'USER_REGEX'. Either include it or remove the dependency array.","ArrayExpression",["153"],"React Hook useEffect has a missing dependency: 'PWD_REGEX'. Either include it or remove the dependency array.",["154"],"React Hook useEffect has a missing dependency: 'PHONE_REGEX'. Either include it or remove the dependency array.",["155"],"React Hook useEffect has a missing dependency: 'EMAIL_REGEX'. Either include it or remove the dependency array.",["156"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode",["157","158"],"'Route' is defined but never used.","'remember' is assigned a value but never used.",{"messageId":"159","fix":"160","desc":"161"},{"messageId":"162","fix":"163","desc":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"messageId":"159","fix":"173","desc":"161"},{"messageId":"162","fix":"174","desc":"164"},"removeEscape",{"range":"175","text":"176"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"177","text":"178"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [USER_REGEX, user]",{"range":"179","text":"180"},"Update the dependencies array to be: [pwd, matchPwd, PWD_REGEX]",{"range":"181","text":"182"},"Update the dependencies array to be: [PHONE_REGEX, phone]",{"range":"183","text":"184"},"Update the dependencies array to be: [EMAIL_REGEX, email]",{"range":"185","text":"186"},{"range":"187","text":"176"},{"range":"188","text":"178"},[661,662],"",[661,661],"\\",[2442,2448],"[USER_REGEX, user]",[2681,2696],"[pwd, matchPwd, PWD_REGEX]",[2778,2785],"[PHONE_REGEX, phone]",[2867,2874],"[EMAIL_REGEX, email]",[472,473],[472,472]]